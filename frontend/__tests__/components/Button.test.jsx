import { render, screen, fireEvent } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import ButtonUI from '../../src/components/ui/Button';

describe('Componente ButtonUI', () => {
  it('deve renderizar o botÃ£o com tÃ­tulo', () => {
    render(<ButtonUI title="Clique aqui" />);
    
    const button = screen.getByRole('button');
    expect(button).toBeInTheDocument();
    expect(button).toHaveTextContent('Clique aqui');
  });

  it('deve chamar a funÃ§Ã£o onClick quando clicado', () => {
    const mockClick = vi.fn();
    render(<ButtonUI title="BotÃ£o teste" fnClick={mockClick} />);
    
    const button = screen.getByRole('button');
    fireEvent.click(button);
    
    expect(mockClick).toHaveBeenCalledTimes(1);
  });

  it('deve estar desabilitado quando disabled=true', () => {
    const mockClick = vi.fn();
    render(<ButtonUI title="BotÃ£o desabilitado" fnClick={mockClick} disabled={true} />);
    
    const button = screen.getByRole('button');
    expect(button).toBeDisabled();
    
    // Tenta clicar no botÃ£o desabilitado
    fireEvent.click(button);
    expect(mockClick).not.toHaveBeenCalled();
  });

  it('deve usar ariaLabel personalizado quando fornecido', () => {
    render(<ButtonUI title="BotÃ£o" ariaLabel="BotÃ£o personalizado" />);
    
    const button = screen.getByLabelText('BotÃ£o personalizado');
    expect(button).toBeInTheDocument();
  });

  it('deve usar title como aria-label quando ariaLabel nÃ£o for fornecido', () => {
    render(<ButtonUI title="Meu botÃ£o" />);
    
    const button = screen.getByLabelText('Meu botÃ£o');
    expect(button).toBeInTheDocument();
  });

  it('deve aplicar className personalizada', () => {
    const customClass = 'custom-button-class';
    render(<ButtonUI title="BotÃ£o" className={customClass} />);
    
    const button = screen.getByRole('button');
    expect(button).toHaveClass(customClass);
  });

  it('deve renderizar Ã­cone quando fornecido', () => {
    const TestIcon = () => <span data-testid="test-icon">ðŸš€</span>;
    render(<ButtonUI title="BotÃ£o com Ã­cone" icon={<TestIcon />} />);
    
    const icon = screen.getByTestId('test-icon');
    expect(icon).toBeInTheDocument();
    expect(icon).toHaveTextContent('ðŸš€');
  });

  it('deve definir o type correto do botÃ£o', () => {
    render(<ButtonUI title="Submit" type="submit" />);
    
    const button = screen.getByRole('button');
    expect(button).toHaveAttribute('type', 'submit');
  });

  it('deve usar type="button" como padrÃ£o', () => {
    render(<ButtonUI title="PadrÃ£o" />);
    
    const button = screen.getByRole('button');
    expect(button).toHaveAttribute('type', 'button');
  });
});
